---
title: "Pulse programming in TopSpin, part 4"
date: 2023-07-23
categories: [nmr, pulse programming]
---

Here, we're going to make some small but useful improvements to our first pulse programme: namely the inclusion of dummy scans, and some "special" comments for parameter descriptions.

*(This is part 4 of a series of posts on pulse programming in TopSpin.
For the other parts, see the table of contents [here](index.qmd).)*


# Making a new version

Before going on, let's create a new version of your pulse programme.
Open up the current pulse programme: you can either do this via the `edpul` interface, or you can use the `eda` command and click the three dots next to the pulse programme name.
Then click **File > Save as...**.
Choose the same directory as the one you were previously in, and for the filename, **append `.1` to your old filename**:

![Creating a new pulse programme.](img/saveas_new_pulprog.png){width=500}

In my case, this means my new filename is `jy_pulacq.1`, as in the screenshot above.
It's generally a good idea to create a new pulse programme whenever you're trying to iteratively improve an existing pulse programme.
A common way to indicate this in filenames is the `.<N>` suffix, where `N` is some kind of "version number".
You can see this strategy used in some of the Bruker standard pulse sequences.

Once you hit **OK**, a window to edit the new pulse programme will appear.
The key indicator is that the filename at the top bar will have changed.
You should now modify the comment in the very first line to reflect this.
Finally, press the **Set PULPROG** button to make this pulse programme the active one, so that the next time you run `zg` this pulse programme will be used.

![Successfully creating a new pulse programme.](img/saveas_new_pulprog_1.png){width=350}

# Dummy scans

In the [previous post](part3.qmd), we said that *dummy scans* were used to set the system to a steady state before running the experiment.
For a simple 1D experiment like this one, it doesn't really matter too much; but for other experiments you can actually get different results depending on how many dummy scans you use.

Let's set the `DS` parameter to 2, i.e. enable 2 dummy scans.
Since `NS` is 2, when we set `DS` to 2, this should double the experiment duration.
Our previous experiment took 8 seconds, so this should take 16 seconds.
Check this with `expt`:

![An experiment with an incorrect duration.](img/expt_8sec.png){width=250}

Whoops! What went wrong?

It turns out that the command `zd` which we previously used doesn't "enable" the collection of dummy scans.
In order to "turn this feature on", we need to use the `ze` command instead.

Change `zd` to `ze`, and near the top of your pulse programme, add a short comment to describe what changes you made in this version.
If you haven't done so already, click the **Set PULPROG** button.
Re-run `expt` and make sure the duration has doubled.
Then re-run the experiment with `zg`.

In a 1D experiment, you probably almost always want to use `ze`.
On the other hand, `zd` is quite useful in 2D spectra: we basically only want to run dummy scans at the *very* start of the experiment, instead of at the beginning of every $t_1$ increment.
We'll see why `zd` might be useful when we get to 2D spectra.


# Parameter descriptions

Type `ased` again to get to the pulse sequence parameter screen.
You might have previously noticed that to the *right* of each parameter, there are some descriptions for them.
But for `d1` and `p1`, the default descriptions are not very helpful:

![Unhelpful parameter descriptions in the `ased` screen.](img/ased_unhelpful.png){width=450}

When setting up a new experiment, it's often useful to have some kind of hint as to what the pulses and delays mean.
The good news is that by adding some "special" comments in the the pulse programme, we can specify a one-line description which will be displayed to users in the `ased` screen.
These comments must go *below* the actual pulse sequence (i.e. after the `exit` command), and must be in the following form:

```{.default}
;name : description
```

Note that there can't be any spaces between the first semicolon and the parameter name, or else it won't be parsed correctly.
(Spaces elsewhere are optional.)
Let's go ahead and add a few descriptions at the bottom of our pulse programme:

```{.default}
;p1 : 90 degree pulse width (from getprosol)
;pl1 : hard pulse power (from getprosol)
;d1 : recovery delay (ca. 1 s)
```

Save the pulse programme and type `ased` again to refresh the screen.
You should now see the new descriptions:

![More helpful parameter descriptions.](img/ased_helpful.png){width=450}

Incidentally, not *all* of the parameters can be specified in this way.
Try it with `NS`, for example.
You'll find that you can't override TopSpin's default description for that.

# The current pulse programme

At this point, your pulse programme should look something like the following, perhaps with a few extra comments

```{.default}
; jy_pulacq.1
; pulse-acquire sequence
; Jonathan Yong, 5 July 2021

; .1 - enabled dummy scans by changing zd to ze

#include <Avance.incl>
 
ze
1 d1
(p1 ph1):f1
go=1 ph31 
wr #0
exit

ph1 = 0 2
ph31 = 0 2

;p1 : 90 degree pulse width (from getprosol)
;pl1 : hard pulse power (from getprosol)
;d1 : recovery delay (ca. 1 s)
```

When you're ready, move on to the [next post](part5.qmd).
