---
title: "Lifetime annotations in Rust"
date: 2023-06-19
date-modified: 2020-06-20
categories: [rust]
---

*Disclaimer*: I don't actually write Rust for anything, and the following is *entirely* based on my interpretation of *one single paragraph in the Rust book*, so I may be completely wrong.

(Edited after some discussion at work. Thanks to everyone who chimed in and helped me to understand this better!)

## Introduction

At today's Rust reading group we were discussing lifetimes.
Most of the features covered in the Rust book until now (such as pattern matching, algebraic data types, traits, and generics) are directly analogous to concepts in Haskell, so I've been feeling reasonably comfortable.
But lifetimes are something very alien to me.[^1]

If you don't think about it too hard, the standard example given in [Section 10.3 of the Rust book](https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-annotations-in-function-signatures) seems *almost* self-evident.
I added a few comments (in lines 10, 13, and 15), specifying the 'true' lifetimes of `x`, `y`, and `result` as `'p`, and `'q`, and `'r` respectively, to make the following discussion clearer.
(You can use the [Rust playground](https://play.rust-lang.org/) to execute the code snippets.)

```{.rust code-line-numbers="true"}
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main () {
    // longer lifetime, let's call this 'p
    let string1 = String::from("long string is long");
    {
        // shorter lifetime, let's call this 'q
        let string2 = String::from("xyz");
        // lifetime of the result, let's call this 'r
        let result = longest(string1.as_str(), string2.as_str());
        println!("The longest string is {}", result);
    };
}
```

Unfortunately, I found some aspects of the book a little bit confusing.
For example, the caption of Listing 10-21 (where `longest()` is defined) says:

> The `longest` function definition specifying that all the references in the signature must have the same lifetime `'a`

It is not really obvious how this is true, because `string1` and `string2` certainly do not have the same lifetime.

In fact, if we think about lifetimes in the same way we do types, then it is not clear how the function can even be called with two arguments that do not have the same lifetime.
For example, the following would obviously fail the function `fst` requires that `x` and `y` have the same type (which they do not):

```{.rust code-line-numbers="true"}
fn fst<T>(x: T, y: T) -> T {
    x
}

fn main() {
    let x = 1;
    let y = "errrrr";
    let z = fst(x, y);
}
```

## Lifetime semantics

The resolution to this seeming contradiction is that the lifetime `'a` passed in is not the lifetime of `string1`, nor is it the lifetime of `string2`.
*It is an entirely separate lifetime which the compiler determines, based on the lifetimes of the two arguments*.
This is expanded upon in later paragraphs, which in my opinion are the key to understanding all of this:

> Remember, when we specify the lifetime parameters in this function signature, we’re not changing the lifetimes of any values passed in or returned. [...]
> When we pass concrete references to `longest`, the concrete lifetime that is substituted for `'a` is the part of the scope of `x` that overlaps with the scope of `y`.
> In other words, the generic lifetime `'a` will get the concrete lifetime that is equal to the smaller of the lifetimes of `x` and `y`.
> Because we’ve annotated the returned reference with the same lifetime parameter `'a,` the returned reference will also be valid for the length of the smaller of the lifetimes of `x` and `y`.

So, the compiler has to find a concrete value for `'a` which is valid for both `x` and `y`---it must be a subset of both the *true* lifetimes `'p` and `'q`.

On top of that, the compiler must also ensure that this lifetime `'a` is valid wherever the return value is being used.
In other words, we must have `'a` ≥ `'r`.

If it is not possible to satisfy all of these conditions, then the compiler should complain.[^2]
Of course, it is not very hard to find a suitable value for `'a` in this particular case:

  ![Resolving the lifetime parameters in `longest`.](./rust1.png){width=482}

In this very simple case, the constraints above essentially reduce to `min('p', 'q') ≥ 'r'`.[^3]
This is what the book means when it says:

> In practice, it means that the lifetime of the reference returned by the `longest` function is the same as the smaller of the lifetimes of the values referred to by the function arguments.

This also explains why the following snippet (Listing 10-23 in the book) fails to compile.
At a high level, we can understand this as the return value `result` being used outside of the scope of `string2`.

However, it would be more precise to say that this is because the compiler cannot find a concrete lifetime `'a` which simultaneously satisfies all three constraints `'a` ≤ `'p`, `'a` ≤ `'q`, and `'a` ≥ `'r`.

```{.rust code-line-numbers="true"}
fn main() {
    let string1 = String::from("long string is long");
    let result;
    {
        let string2 = String::from("xyz");
        result = longest(string1.as_str(), string2.as_str());
    }
    println!("The longest string is {}", result);
}
```

![An occasion where the lifetime parameters cannot be resolved.](./rust2.png){width=450}

## Lifetime bounds

With this understanding of the basic example, we can now tackle a slightly more complicated one, which came up during the reading group.
This one uses so-called [*'lifetime bounds'*](https://doc.rust-lang.org/reference/trait-bounds.html#lifetime-bounds): the `'b: 'a` syntax in the function signature stipulates that the lifetime `'b` must be at least as long as the lifetime `'a`.

```{.rust code-line-numbers="true"}
fn longest2<'a, 'b: 'a>(x: &'a str, y: &'b str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main () {
    // longer lifetime, let's call this 'p
    let string1 = String::from("long string is long");
    {
        // shorter lifetime, let's call this 'q
        let string2 = String::from("xyz");
        // lifetime of the result, let's call this 'r
        let result = longest2(string1.as_str(), string2.as_str());
        println!("The longest2 string is {}", result);
    };
}
```

Since the *true lifetimes* of the variables are such that`'q` < `'p`, it is not clear why the compiler should accept this.
After all, the function signature seems to suggest that the second parameter must outlive the first.

However, the entire point is that `'a` and `'b` are not the same as `'p` and `'q`; they are new lifetimes which are determined by the compiler.
Going along the lines of the discussion above, the compiler must now find two lifetimes `'a` and `'b` which together satisfy the following constraints:

1. `'a` ≤ `'p` (because of the first parameter)
2. `'b` ≤ `'q` (because of the second parameter)
3. `'b` ≥ `'a` (because of the lifetime bound)
4. `'a` ≥ `'r` (because of the return value)

One can see that if we instantiate *both* lifetimes `'a` and `'b` as being equal to `'q`, then all three of these requirements are met.

  ![A happy resolution for the lifetime parameters in `longest2`.](./rust3.png){width=143}

## Is `longest2` more restrictive?

With this knowledge, we might now consider whether there any possible cases in which using `longest2` will raise a compiler error, while `longest` compiles just fine.
(Or *vice versa*!)

I think not, because:

- **If we can satisfy the function signature for `longest`, then we can satisfy that for `longest2`.**

  If we have a valid call to `longest`, that means that there already exists some lifetime `'a` which satisfies `'a` ≤ `'p`, `'a` ≤ `'q'`, and `'a` ≥ `'r`.

  If we then switch this call to one of `longest2`, we need to find a new lifetime `'b` which obeys the four requirements above, namely: `'a` ≤ `'p`, `'b` ≤ `'q`, `'b` ≥ `'a`, and `'a` ≥ `'r`.
  
  The first and last of these are already satisfied, and we can satisfy the other two by simply choosing `'b` to be equal to `'a`, making the call to `longest2` also valid.

- **If we can satisfy the function signature for `longest2`, then we can satisfy that for `longest`.**

  If we have a valid call to `longest2`, then there exist two lifetimes `'a` and `'b` which satisfy `'a` ≤ `'p`, `'b` ≤ `'q`, `'b` ≥ `'a`, and `'a` ≥ `'r`.

  The requirements for `longest` are that we must find a lifetime `'c` (different letter chosen to avoid clashes) for which `'c` ≤ `'p`, `'c` ≤ `'q`, and `'c` ≥ `'r`.
  If we just choose `'c` to be equal to `'a`, we are done.

Collectively, this means that any valid call to `longest` can be replaced with a valid call to `longest2` (and *vice versa*).


[^1]: Haskell is garbage-collected.

[^2]: In other words, this is an *existential quantifier*: the compiler must prove that there exists some lifetime `'a` such that `'a` ≤ `'p` and `'a` ≤ `'q`.

[^3]: Perhaps we should talk about the *intersection* of `'p` and `'q`, rather than the minimum. But in this case, they are the same thing.
